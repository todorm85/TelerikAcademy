@model HikingPlanAndRescue.Web.Areas.Private.Models.TrainingCreateViewModel

@{
    ViewBag.Title = "Add training";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    <input type="hidden" value="@User.Identity.GetUserId()" name="UserId" />
    <input type="hidden" value="@User.Identity.GetUserId()" name="Track.UserId" />

    <div class="form-horizontal">
        <fieldset class="col-md-6">

            <legend>Training Details</legend>

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })

            <div class="form-group">
                @Html.LabelFor(model => model.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Title, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.StartDate, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EndDate, htmlAttributes: new { @class = "control-label col-md-2"})
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Water, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Water, new { htmlAttributes = new { @class = "form-control", id = "water" } })
                    @Html.ValidationMessageFor(model => model.Water, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Calories, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Calories, new { htmlAttributes = new { @class = "form-control", id = "calories" } })
                    @Html.ValidationMessageFor(model => model.Calories, "", new { @class = "text-danger" })
                </div>
            </div>

        </fieldset>
        <fieldset class="col-md-6">

            <legend>Track Details</legend>

            <div class="form-group">
                @Html.LabelFor(model => model.Track.Length, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Track.Length, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Track.Length, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Track.Ascent, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Track.Ascent, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Track.Ascent, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Track.AscentLength, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Track.AscentLength, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Track.AscentLength, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Track.Title, htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Track.Title, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Track.Title, "", new { @class = "text-danger" })
                </div>
            </div>

        </fieldset>


        <div class="form-group">
            <div class="col-md-10">
                <input type="submit" value="Create" class="btn btn-success" />
            </div>
        </div>
    </div>
}

<div class="row">
    @Html.ActionLink("Back to My Trainings", "Index", null, new { @class = "btn btn-danger" })
    <button id="predict-btn" class="btn btn-info">
        Predict water and calories
    </button>
    <span id="predicting" style="display:none" class="alert alert-info">PREDICTING...</span>
</div>

@Html.Partial("_Modal")

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")

    <script>
        $(document).ready(function () {
            var predictBtn = jQuery('#predict-btn');

            predictBtn.on('click', function () {
                $('#predicting').show();
                var formData = $('form').serialize();
                $.post("/Private/Trainings/AjaxPredict", formData, function (data) {
                    console.log(data);
                    if (data === "" || !data) {
                        $('#predicting').hide();
                        $('#modalTitle').html('Error');
                        $('#modalMessage').html('Couldn`t predict, check your input. Perhaps EndDate before StartDate?');
                        $('#modal').modal();
                        return;
                    }

                    $('#calories').val(data.Calories);
                    $('#calories').attr('value', data.Calories);

                    $('#water').val(data.Water);
                    $('#water').attr('value', data.Water);

                    var endDatePicker = $('#EndDate');
                    endDatePicker.val(data.EndDate);
                    endDatePicker.attr('value', data.EndDate);
                    // hack to refresh the date in kendo datetime picker, easier and faster than the docs
                    endDatePicker.focus();
                    endDatePicker.focusout();

                    $('#predicting').hide();
                });
            });

        });
    </script>
}